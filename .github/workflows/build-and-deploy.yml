name: Build and Deploy PeerBot

on:
  push:
    branches: [ main ]
    paths:
      - 'packages/**'
      - 'docker/**'
      - 'charts/**'
      - '.github/workflows/build-and-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/**'
      - 'docker/**'
      - 'charts/**'

env:
  REGISTRY: ghcr.io
  DISPATCHER_IMAGE_NAME: ${{ github.repository }}/dispatcher
  WORKER_IMAGE_NAME: ${{ github.repository }}/worker

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Packages
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install
    
    - name: Run type checking
      run: bun run typecheck:packages
    
    - name: Run tests
      run: bun run test:packages
    
    - name: Check formatting
      run: bun run format:check

  build-images:
    runs-on: ubuntu-latest
    needs: test
    name: Build Docker Images
    outputs:
      dispatcher-image: ${{ steps.dispatcher.outputs.image }}
      worker-image: ${{ steps.worker.outputs.image }}
      dispatcher-digest: ${{ steps.dispatcher.outputs.digest }}
      worker-digest: ${{ steps.worker.outputs.digest }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for dispatcher
      id: dispatcher-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.DISPATCHER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for worker
      id: worker-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WORKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push dispatcher image
      id: dispatcher
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dispatcher.Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.dispatcher-meta.outputs.tags }}
        labels: ${{ steps.dispatcher-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push worker image  
      id: worker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/worker.Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.worker-meta.outputs.tags }}
        labels: ${{ steps.worker-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  validate-helm:
    runs-on: ubuntu-latest
    name: Validate Helm Chart
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.1
    
    - name: Validate Helm chart
      run: |
        helm lint charts/peerbot
        helm template peerbot charts/peerbot --debug

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, validate-helm]
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.1
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        context: staging
    
    - name: Deploy to staging
      run: |
        helm upgrade --install peerbot-staging charts/peerbot \
          --namespace peerbot-staging \
          --create-namespace \
          --set global.imageRegistry=${{ env.REGISTRY }}/ \
          --set dispatcher.image.repository=${{ env.DISPATCHER_IMAGE_NAME }} \
          --set dispatcher.image.tag=latest \
          --set worker.image.repository=${{ env.WORKER_IMAGE_NAME }} \
          --set worker.image.tag=latest \
          --set secrets.slackBotToken="${{ secrets.STAGING_SLACK_BOT_TOKEN }}" \
          --set secrets.githubToken="${{ secrets.STAGING_GITHUB_TOKEN }}" \
          --set config.gcsProjectId="${{ secrets.STAGING_GCS_PROJECT_ID }}" \
          --wait --timeout=10m
    
    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=peerbot,app.kubernetes.io/component=dispatcher -n peerbot-staging --timeout=300s
        kubectl get pods -n peerbot-staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.1
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        context: production
    
    - name: Deploy to production
      run: |
        helm upgrade --install peerbot charts/peerbot \
          --namespace peerbot \
          --create-namespace \
          --set global.imageRegistry=${{ env.REGISTRY }}/ \
          --set dispatcher.image.repository=${{ env.DISPATCHER_IMAGE_NAME }} \
          --set dispatcher.image.tag=latest \
          --set worker.image.repository=${{ env.WORKER_IMAGE_NAME }} \
          --set worker.image.tag=latest \
          --set secrets.slackBotToken="${{ secrets.PROD_SLACK_BOT_TOKEN }}" \
          --set secrets.githubToken="${{ secrets.PROD_GITHUB_TOKEN }}" \
          --set config.gcsProjectId="${{ secrets.PROD_GCS_PROJECT_ID }}" \
          --wait --timeout=15m
    
    - name: Verify deployment
      run: |
        kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=peerbot,app.kubernetes.io/component=dispatcher -n peerbot --timeout=300s
        kubectl get pods -n peerbot
        
    - name: Create GitHub release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: PeerBot v${{ github.run_number }}
        body: |
          Automated release of PeerBot Kubernetes deployment
          
          **Deployed Images:**
          - Dispatcher: ${{ needs.build-images.outputs.dispatcher-image }}
          - Worker: ${{ needs.build-images.outputs.worker-image }}
          
          **Changes:**
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false