FROM node:20-alpine

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache \
    git \
    curl \
    bash \
    openssh-client \
    jq \
    sudo

# Install cloudflared
RUN curl -L "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64" -o /usr/local/bin/cloudflared && \
    chmod +x /usr/local/bin/cloudflared

# Create a non-root user with home directory
RUN addgroup -g 1001 claude && \
    adduser -u 1001 -G claude -h /home/claude -D claude

# Install bun globally for all users
RUN curl -fsSL https://bun.sh/install | bash
ENV PATH="/root/.bun/bin:${PATH}"
ENV BUN_INSTALL="/root/.bun"

# Install Claude Code CLI globally and make it accessible to all users
RUN bun install -g @anthropic-ai/claude-code@1.0.59 && \
    ln -sf /root/.bun/bin/claude /usr/local/bin/claude && \
    chmod +x /usr/local/bin/claude && \
    chmod +x /root/.bun/bin/claude && \
    echo "Testing claude command..." && \
    /usr/local/bin/claude --version

# Ensure the non-root user can also access bun and claude
# Add to both bashrc and global environment for broader compatibility
RUN echo 'export PATH="/root/.bun/bin:$PATH"' >> /home/claude/.bashrc && \
    echo 'export BUN_INSTALL="/root/.bun"' >> /home/claude/.bashrc

# Add environment variables for non-root user access
ENV PATH="/root/.bun/bin:${PATH}" \
    BUN_INSTALL="/root/.bun"

# Copy package files
COPY package.json ./
COPY tsconfig.json ./
COPY packages/worker/package.json ./packages/worker/
COPY packages/core-runner/package.json ./packages/core-runner/
COPY packages/dispatcher/package.json ./packages/dispatcher/

# Install all dependencies including devDependencies for building
RUN bun install

# Copy all source code
COPY packages/ ./packages/
COPY scripts/ ./scripts/

# TypeScript is already installed as a devDependency

# Build the worker and core-runner packages
WORKDIR /app/packages/core-runner
RUN bun run build || echo "Warning: core-runner build had errors"

WORKDIR /app/packages/worker  
RUN bun run build || echo "Warning: worker build had errors"

# Verify the build output
RUN ls -la /app/packages/worker/dist/ || echo "No dist directory found"

WORKDIR /app

# Create workspace directory and set permissions
RUN mkdir -p /workspace && \
    chown -R claude:claude /app && \
    chown -R claude:claude /workspace && \
    chmod 755 /workspace

# Copy .claude/projects directory if it exists
COPY --chown=claude:claude .claude/ /home/claude/.claude/

# Ensure .claude directory structure exists for claude user and make scripts executable
RUN mkdir -p /home/claude/.claude/projects && \
    chown -R claude:claude /home/claude/.claude && \
    chmod -R 755 /home/claude/.claude && \
    chmod +x /app/scripts/*.sh

# Switch to non-root user
USER claude

# Set working directory to worker
WORKDIR /app/packages/worker

# Run the compiled JavaScript
ENTRYPOINT ["bun", "run", "dist/index.js"]