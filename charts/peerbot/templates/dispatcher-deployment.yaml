{{- if .Values.dispatcher.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "peerbot.fullname" . }}-dispatcher
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: dispatcher
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.dispatcher.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "peerbot.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: dispatcher
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "peerbot.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: dispatcher
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "peerbot.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: wait-for-postgres
        image: postgres:16
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        env:
        - name: PGHOST
          value: {{ include "peerbot.fullname" . }}-postgresql
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: {{ .Values.postgresql.username }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "peerbot.fullname" . }}-secrets
              key: postgresql-password
        - name: PGDATABASE
          value: {{ .Values.postgresql.database }}
        command:
        - sh
        - -c
        - |
          until pg_isready; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      containers:
        - name: dispatcher
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry }}{{ .Values.dispatcher.image.repository }}:{{ .Values.dispatcher.image.tag }}"
          imagePullPolicy: {{ .Values.dispatcher.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.dispatcher.service.targetPort }}
              protocol: TCP
          {{- if not .Values.slack.socketMode }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          {{- end }}
          resources:
            {{- toYaml .Values.dispatcher.resources | nindent 12 }}
          env:
            # Slack configuration
            - name: SLACK_BOT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "peerbot.fullname" . }}-secrets
                  key: slack-bot-token
            - name: SLACK_SIGNING_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "peerbot.fullname" . }}-secrets
                  key: slack-signing-secret
                  optional: true
            - name: SLACK_APP_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "peerbot.fullname" . }}-secrets
                  key: slack-app-token
                  optional: true
            - name: SLACK_HTTP_MODE
              value: {{ if .Values.slack.socketMode }}"false"{{ else }}"true"{{ end }}
            - name: PORT
              value: "{{ .Values.dispatcher.service.targetPort }}"
            - name: SLACK_ALLOW_DIRECT_MESSAGES
              value: "{{ .Values.slack.allowDirectMessages }}"
            - name: SLACK_ALLOW_PRIVATE_CHANNELS
              value: "{{ .Values.slack.allowPrivateChannels }}"
            
            # Kubernetes configuration
            - name: KUBERNETES_NAMESPACE
              value: "{{ .Values.kubernetes.namespace }}"
            - name: WORKER_IMAGE
              value: "{{ .Values.global.imageRegistry }}{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag }}"
            - name: WORKER_CPU
              value: "{{ .Values.worker.resources.requests.cpu }}"
            - name: WORKER_MEMORY
              value: "{{ .Values.worker.resources.requests.memory }}"
            - name: WORKER_TIMEOUT_SECONDS
              value: "{{ .Values.worker.job.timeoutSeconds }}"
            
            # Database configuration for pgboss
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.username }}:peerbot123@{{ include "peerbot.fullname" . }}-postgresql:5432/{{ .Values.postgresql.database }}"
            
            # Sentry configuration
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "peerbot.fullname" . }}-secrets
                  key: sentry-dsn
                  optional: true

            # GitHub configuration
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "peerbot.fullname" . }}-secrets
                  key: github-token
            - name: GITHUB_ORGANIZATION
              valueFrom:
                configMapKeyRef:
                  name: {{ include "peerbot.fullname" . }}-config
                  key: github-organization
            {{- if .Values.config.githubRepository }}
            - name: GITHUB_REPOSITORY
              valueFrom:
                configMapKeyRef:
                  name: {{ include "peerbot.fullname" . }}-config
                  key: github-repository
            {{- end }}
          
            # Claude configuration
            - name: MODEL
              value: "{{ .Values.claude.model }}"
            - name: TIMEOUT_MINUTES
              value: "{{ .Values.claude.timeoutMinutes }}"
            - name: ALLOWED_TOOLS
              value: "{{ .Values.claude.allowedTools }}"
            
            # Session configuration
            - name: SESSION_TIMEOUT_MINUTES
              valueFrom:
                configMapKeyRef:
                  name: {{ include "peerbot.fullname" . }}-config
                  key: session-timeout-minutes
            
            # Application configuration
            - name: NODE_ENV
              value: "{{ .Values.dispatcher.config.nodeEnv }}"
            - name: LOG_LEVEL
              value: "{{ .Values.dispatcher.config.logLevel }}"
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}{{- end }}
