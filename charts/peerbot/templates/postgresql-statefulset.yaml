apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "peerbot.fullname" . }}-postgresql
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  serviceName: {{ include "peerbot.fullname" . }}-postgresql
  replicas: 1
  selector:
    matchLabels:
      {{- include "peerbot.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        {{- include "peerbot.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.database }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.username }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "peerbot.fullname" . }}-secrets
              key: postgresql-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }}
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            cpu: {{ .Values.postgresql.resources.requests.cpu }}
            memory: {{ .Values.postgresql.resources.requests.memory }}
          limits:
            cpu: {{ .Values.postgresql.resources.limits.cpu }}
            memory: {{ .Values.postgresql.resources.limits.memory }}
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      volumes:
      - name: postgresql-init
        configMap:
          name: {{ include "peerbot.fullname" . }}-postgresql-init
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.postgresql.storageClass }}
      resources:
        requests:
          storage: {{ .Values.postgresql.storage.size }}