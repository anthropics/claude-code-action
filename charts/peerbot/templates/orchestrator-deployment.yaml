apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "peerbot.fullname" . }}-orchestrator
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: orchestrator
spec:
  replicas: {{ .Values.orchestrator.replicas }}
  selector:
    matchLabels:
      {{- include "peerbot.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: orchestrator
  template:
    metadata:
      labels:
        {{- include "peerbot.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: orchestrator
    spec:
      serviceAccountName: {{ include "peerbot.fullname" . }}-orchestrator
      containers:
      - name: orchestrator
        image: "{{ .Values.orchestrator.image.repository }}:{{ .Values.orchestrator.image.tag }}"
        imagePullPolicy: {{ .Values.orchestrator.image.pullPolicy }}
        env:
        # Kubernetes configuration
        - name: KUBERNETES_NAMESPACE
          value: {{ .Values.namespace }}
        - name: WORKER_IMAGE
          value: "{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag }}"
        - name: WORKER_CPU
          value: {{ .Values.worker.resources.requests.cpu }}
        - name: WORKER_MEMORY
          value: {{ .Values.worker.resources.requests.memory }}
        
        # PostgreSQL configuration
        - name: DATABASE_HOST
          value: {{ include "peerbot.fullname" . }}-postgresql
        - name: DATABASE_PORT
          value: "5432"
        - name: DATABASE_NAME
          value: {{ .Values.postgresql.database }}
        - name: DATABASE_USER
          value: {{ .Values.postgresql.username }}
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "peerbot.fullname" . }}-secrets
              key: postgresql-password
        
        # pgboss configuration
        - name: PGBOSS_CONNECTION_STRING
          value: "postgres://{{ .Values.postgresql.username }}:$(DATABASE_PASSWORD)@{{ include "peerbot.fullname" . }}-postgresql:5432/{{ .Values.postgresql.database }}"
        - name: PGBOSS_RETRY_LIMIT
          value: "{{ .Values.pgboss.retryLimit }}"
        - name: PGBOSS_RETRY_DELAY
          value: "{{ .Values.pgboss.retryDelay }}"
        - name: PGBOSS_EXPIRE_HOURS
          value: "{{ .Values.pgboss.expireInHours }}"
        
        # Queue configuration
        - name: QUEUE_DIRECT_MESSAGE
          value: {{ .Values.queues.directMessage }}
        - name: QUEUE_THREAD_MESSAGE
          value: {{ .Values.queues.threadMessage }}
        
        # Health check port
        - name: PORT
          value: "8080"
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        resources:
          requests:
            cpu: {{ .Values.orchestrator.resources.requests.cpu }}
            memory: {{ .Values.orchestrator.resources.requests.memory }}
          limits:
            cpu: {{ .Values.orchestrator.resources.limits.cpu }}
            memory: {{ .Values.orchestrator.resources.limits.memory }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "peerbot.fullname" . }}-orchestrator
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: orchestrator
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  selector:
    {{- include "peerbot.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: orchestrator

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "peerbot.fullname" . }}-orchestrator
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: orchestrator

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "peerbot.fullname" . }}-orchestrator
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: orchestrator
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "peerbot.fullname" . }}-orchestrator
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: orchestrator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "peerbot.fullname" . }}-orchestrator
subjects:
- kind: ServiceAccount
  name: {{ include "peerbot.fullname" . }}-orchestrator
  namespace: {{ .Values.namespace }}