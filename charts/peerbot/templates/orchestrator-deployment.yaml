{{- if .Values.orchestrator.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "peerbot.fullname" . }}-orchestrator
  namespace: {{ .Values.kubernetes.namespace }}
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: orchestrator
spec:
  replicas: {{ .Values.orchestrator.replicas | default 1 }}
  selector:
    matchLabels:
      {{- include "peerbot.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: orchestrator
  template:
    metadata:
      labels:
        {{- include "peerbot.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: orchestrator
    spec:
      serviceAccountName: {{ include "peerbot.fullname" . }}-orchestrator
      initContainers:
      - name: wait-for-postgres
        image: postgres:16
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        env:
        - name: PGHOST
          value: {{ include "peerbot.fullname" . }}-postgresql
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: {{ .Values.postgresql.username }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "peerbot.fullname" . }}-secrets
              key: postgresql-password
        - name: PGDATABASE
          value: {{ .Values.postgresql.database }}
        command:
        - sh
        - -c
        - |
          until pg_isready; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      containers:
      - name: orchestrator
        image: "{{ .Values.orchestrator.image.repository }}:{{ .Values.orchestrator.image.tag }}"
        imagePullPolicy: {{ .Values.orchestrator.image.pullPolicy }}
        
        env:
        # Database connection
        - name: DATABASE_HOST
          value: {{ include "peerbot.fullname" . }}-postgresql
        - name: DATABASE_PORT
          value: "5432"
        - name: DATABASE_NAME
          value: {{ .Values.postgresql.database }}
        - name: DATABASE_USERNAME
          value: {{ .Values.postgresql.username }}
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "peerbot.fullname" . }}-secrets
              key: postgresql-password
        
        # pgboss connection
        - name: DATABASE_URL
          value: "postgres://{{ .Values.postgresql.username }}:peerbot123@{{ include "peerbot.fullname" . }}-postgresql:5432/{{ .Values.postgresql.database }}"
        
        # Sentry configuration
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: {{ include "peerbot.fullname" . }}-secrets
              key: sentry-dsn
              optional: true
        
        # pgboss configuration
        - name: PGBOSS_RETRY_LIMIT
          value: "{{ .Values.pgboss.retryLimit }}"
        - name: PGBOSS_RETRY_DELAY
          value: "{{ .Values.pgboss.retryDelay }}"
        - name: PGBOSS_EXPIRE_HOURS
          value: "{{ .Values.pgboss.expireInHours }}"
        
        # Worker image configuration
        - name: WORKER_IMAGE_REPOSITORY
          value: {{ .Values.worker.image.repository }}
        - name: WORKER_IMAGE_TAG
          value: {{ .Values.worker.image.tag }}
        
        # Worker resource configuration
        - name: WORKER_CPU_REQUEST
          value: {{ .Values.worker.resources.requests.cpu }}
        - name: WORKER_MEMORY_REQUEST
          value: {{ .Values.worker.resources.requests.memory }}
        - name: WORKER_CPU_LIMIT
          value: {{ .Values.worker.resources.limits.cpu }}
        - name: WORKER_MEMORY_LIMIT
          value: {{ .Values.worker.resources.limits.memory }}
        
        # Kubernetes configuration
        - name: KUBERNETES_NAMESPACE
          value: {{ .Values.kubernetes.namespace }}
        
        # Orchestrator configuration
        - name: ORCHESTRATOR_PORT
          value: "8080"
        - name: LOG_LEVEL
          value: {{ .Values.orchestrator.logLevel | default "info" }}
        - name: NODE_ENV
          value: "development"
        - name: WORKER_IDLE_CLEANUP_MINUTES
          value: {{ .Values.orchestrator.idleCleanupMinutes | default "60" | quote }}
        - name: MAX_WORKER_DEPLOYMENTS
          value: {{ .Values.orchestrator.maxWorkerDeployments | default "20" | quote }}
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        resources:
          requests:
            cpu: {{ .Values.orchestrator.resources.requests.cpu }}
            memory: {{ .Values.orchestrator.resources.requests.memory }}
          limits:
            cpu: {{ .Values.orchestrator.resources.limits.cpu }}
            memory: {{ .Values.orchestrator.resources.limits.memory }}
{{- end }}