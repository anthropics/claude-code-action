{{- if .Values.podSecurityPolicy.enabled -}}
# Note: PodSecurityPolicy is deprecated in K8s 1.21+ and removed in 1.25+
# For newer clusters, use Pod Security Standards via namespace labels instead
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: {{ include "peerbot.fullname" . }}-psp
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
spec:
  # Privilege and access controls
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false  # Set to true if your app supports it
  
  # Required to prevent escalations to root
  requiredDropCapabilities:
    - ALL
  
  # Allow specific capabilities if needed
  allowedCapabilities: []
  
  # Default capabilities to add
  defaultAddCapabilities: []
  
  # User and group controls
  runAsUser:
    rule: 'MustRunAsNonRoot'
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  
  # Volume controls
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
    # Do not allow hostPath, hostNetwork, etc.
  
  # Host controls
  hostNetwork: false
  hostIPC: false
  hostPID: false
  hostPorts: []
  
  # AppArmor/SELinux
  seLinux:
    rule: 'RunAsAny'
  
  # Seccomp
  seccompProfiles:
    - 'runtime/default'
  
  # Prevent access to host filesystem
  allowedHostPaths: []
  
  # Proc mount
  allowedProcMountTypes:
    - Default
  
  # Flexvolume drivers
  allowedFlexVolumes: []

---
# ClusterRole to use the PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "peerbot.fullname" . }}-psp-use
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - {{ include "peerbot.fullname" . }}-psp

---
# RoleBinding to allow service account to use PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "peerbot.fullname" . }}-psp-use
  namespace: {{ .Values.kubernetes.namespace }}
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "peerbot.fullname" . }}-psp-use
subjects:
- kind: ServiceAccount
  name: {{ include "peerbot.serviceAccountName" . }}
  namespace: {{ .Values.kubernetes.namespace }}

{{- else if .Values.podSecurityStandards.enabled }}
---
# Pod Security Standards (for K8s 1.23+)
# This is applied via namespace labels in the namespace template
# or can be applied to existing namespaces

# Example of how to apply Pod Security Standards:
# kubectl label namespace {{ .Values.kubernetes.namespace }} \
#   pod-security.kubernetes.io/enforce={{ .Values.podSecurityStandards.enforce | default "restricted" }} \
#   pod-security.kubernetes.io/audit={{ .Values.podSecurityStandards.audit | default "restricted" }} \
#   pod-security.kubernetes.io/warn={{ .Values.podSecurityStandards.warn | default "restricted" }}

{{- end }}

---
# Security Context for dispatcher deployment
{{- if .Values.securityContext.enabled }}
# This is typically applied in the deployment template, but including here for reference
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "peerbot.fullname" . }}-security-context
  namespace: {{ .Values.kubernetes.namespace }}
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
data:
  dispatcher-security-context.yaml: |
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
        - ALL
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default false }}
  
  worker-security-context.yaml: |
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
        - ALL
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: {{ .Values.securityContext.worker.readOnlyRootFilesystem | default false }}
      # Workers may need additional file system access for repositories
      {{- if .Values.securityContext.worker.additionalCapabilities }}
      capabilities:
        add:
        {{- range .Values.securityContext.worker.additionalCapabilities }}
        - {{ . }}
        {{- end }}
      {{- end }}

{{- end }}