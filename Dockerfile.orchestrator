# Multi-stage build for orchestrator service
FROM oven/bun:1 AS base

# Install dependencies into temp directory
# This will cache them and speed up future builds
FROM base AS install
RUN mkdir -p /temp/dev
COPY package.json bun.lock /temp/dev/
COPY packages/orchestrator/package.json /temp/dev/packages/orchestrator/
COPY packages/core-runner/package.json /temp/dev/packages/core-runner/
RUN cd /temp/dev && bun install --frozen-lockfile

# Install with --production (exclude devDependencies)
RUN mkdir -p /temp/prod
COPY package.json bun.lock /temp/prod/
COPY packages/orchestrator/package.json /temp/prod/packages/orchestrator/
COPY packages/core-runner/package.json /temp/prod/packages/core-runner/
RUN cd /temp/prod && bun install --frozen-lockfile --production

# Copy node_modules from temp directory
# Then copy all (non-ignored) project files into the image
FROM base AS prerelease
COPY --from=install /temp/dev/node_modules node_modules
COPY . .

# Build the orchestrator package
WORKDIR /app/packages/orchestrator
RUN bun run build

# Copy production dependencies and source code to run image
FROM base AS release
COPY --from=install /temp/prod/node_modules node_modules
COPY --from=prerelease /app/packages/orchestrator/dist /app/packages/orchestrator/dist
COPY --from=prerelease /app/packages/orchestrator/package.json /app/packages/orchestrator/package.json
COPY --from=prerelease /app/packages/core-runner /app/packages/core-runner

# Create workspace directory
RUN mkdir -p /workspace
WORKDIR /app/packages/orchestrator

# Expose health check port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Run the orchestrator
USER bun
ENTRYPOINT ["bun", "run", "dist/index.js"]